---
import { Icon } from 'astro-icon/components';
import Chip from '~/components/widgets/Chip.astro';
import type { Props as ChipProps } from '~/components/widgets/Chip.astro';

interface ChipItem extends ChipProps {
  type: 'chip';
  value: string;
}

interface TextItem {
  type: 'text';
  value: string;
}

type Item = TextItem | ChipItem;

export interface Props {
  blocks: {
    icon?: string;
    title: string;
    span?: string;
    items: Item[][];
  }[];
}

const { blocks } = Astro.props;
---

<div class="m-auto mb-6 grid max-w-5xl grid-cols-3 gap-4">
  {
    blocks.map((block) => (
      <Fragment>
        <div
          class:list={[
            'col-span-3 row-span-1 rounded-lg border-2 border-light-purple bg-pastel-purple p-4 shadow-lg transition hover:shadow-md dark:border-cherry dark:bg-dark-purple',
            block.span ?? 'md:col-span-1',
          ]}
        >
          <div class="mb-3 flex items-center gap-3">
            {block.icon && (
              <span class="inline-flex h-9 w-9 items-center justify-center rounded-lg bg-light-purple dark:bg-darker-purple dark:text-acid-green">
                <Icon name={block.icon} class="h-6 w-6" />
              </span>
            )}
            <h2 class="inline text-xl font-bold">{block.title}</h2>
          </div>
          <ul>
            <li>
              {block.items.map((row) => (
                <p class="mb-2 dark:text-light-purple">
                  {row.map((item) => {
                    if (item.type === 'chip')
                      return <Chip value={item.value} href={item.href} variant={item.variant || 'dark'} />;
                    if (item.type === 'text') return item.value;
                  })}
                </p>
              ))}
            </li>
          </ul>
        </div>
      </Fragment>
    ))
  }
</div>
