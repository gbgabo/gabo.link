---
import { Icon } from 'astro-icon';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';

import { getHomePermalink, getAsset } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends Link {
  type?: string;
}

interface MenuLink extends Link {
  links?: Array<Link>;
}

export interface Props {
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

let menuIndex = 1;

const delayClasses = [
  'delay-[100ms]',
  'delay-[200ms]',
  'delay-[300ms]',
  'delay-[400ms]',
  'delay-[500ms]',
  'delay-[600ms]',
  'delay-[700ms]',
  'delay-[800ms]',
  'delay-[900ms]',
];

const delayClassesMd = [
  'md:delay-[100ms]',
  'md:delay-[200ms]',
  'md:delay-[300ms]',
  'md:delay-[400ms]',
  'md:delay-[500ms]',
  'md:delay-[600ms]',
  'md:delay-[700ms]',
  'md:delay-[800ms]',
  'md:delay-[900ms]',
];

const {
  links = [],
  actions = [],
  isSticky = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;
---

<header
  class="bg-transparent fixed bottom-0 md:top-0 md:sticky z-40 flex-none mx-auto w-full transition-all ease-in duration-100"
  id="header"
>
  <div class="py-3 px-3 md:py-3.5 md:px-4 mx-auto w-full md:flex md:justify-start max-w-7xl">
    <nav
      class="menu-list overflow-hidden p-2 mx-auto w-full h-fit max-w-7xl absolute bottom-16 left-0 dark:text-slate-200 bg-pastel-purple/90 md:bg-inherit dark:bg-darker-purple/90 md:justify-start md:static md:dark:bg-inherit md:show md:items-center md:w-auto md:flex md:h-auto md:overflow-visible md:mx-5"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:items-center md:flex-row md:pt-0 md:self-center md:text-base md:w-auto text-xl w-full"
      >
        {
          links.map(({ text, href, links }, index) => {
            return (
              <li class={links?.length ? 'dropdown' : ''}>
                {links?.length ? (
                  <>
                    <button
                      class:list={[
                        'menu-item w-full dark:hover:bg-dark-purple py-3 px-4 flex items-center font-medium rounded-md hover:text-gray-900 dark:hover:text-white md:hover:bg-gray-200 md:p-0',
                        delayClasses[menuIndex + index],
                        delayClassesMd[index],
                      ]}
                    >
                      {href ? (
                        <a class="w-full text-left md:py-2 md:px-4" href={href}>
                          {text}
                          <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 hidden md:inline" />
                        </a>
                      ) : (
                        <span>
                          {text}
                          <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 hidden md:inline" />
                        </span>
                      )}
                    </button>
                    <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark-purple rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                      {links.map(({ text: text2, href: href2 }, index2) => {
                        menuIndex = index2 === 0 ? menuIndex + 1 : menuIndex + index2;
                        return (
                          <li>
                            <a
                              class:list={[
                                'menu-item dark:hover:bg-darker-purple py-3 px-5 block whitespace-no-wrap first:rounded-t last:rounded-b md:animate-fade-up md:hover:bg-gray-200 md:py-2',
                                delayClasses[menuIndex],
                                delayClassesMd[index2],
                              ]}
                              href={href2}
                            >
                              {text2}
                            </a>
                          </li>
                        );
                      })}
                    </ul>
                  </>
                ) : (
                  <a
                    class:list={[
                      `menu-item dark:hover:bg-dark-purple py-3 px-4 flex items-center font-medium rounded-md hover:text-gray-900 dark:hover:text-white
                      md:hover:bg-gray-200 md:py-2`,
                      `${delayClasses[menuIndex + index]}`,
                      `${delayClassesMd[index]}`,
                    ]}
                    href={href}
                  >
                    {text}
                  </a>
                )}
              </li>
            );
          })
        }
      </ul>
    </nav>
    <div class:list={[{ 'mr-auto': position === 'right' }, 'flex justify-between md:order-first']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        {showToggleTheme && <ToggleTheme />}
        <ToggleMenu />
      </div>
    </div>
    <div class:list={[{ 'ml-auto': position === 'left' }, 'md:self-center flex items-center md:mb-0 ml-auto']}>
      <div class="hidden items-center md:flex">
        {showToggleTheme && <ToggleTheme iconClass="w-5 h-5" />}

        {
          showRssFeed && (
            <a
              class="dark:text-light-purple hover:bg-gray-100 dark:hover:bg-dark-purple focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
              aria-label="RSS Feed"
              href={getAsset('/rss.xml')}
            >
              <Icon name="tabler:rss" class="w-5 h-5" />
            </a>
          )
        }
        {
          actions?.length ? (
            <span class="ml-4">
              {actions.map(({ text, href, type }) => (
                <a
                  class:list={[
                    'btn ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm',
                    { 'btn-ghost': type === 'ghost', 'btn-primary': type === 'primary' },
                  ]}
                  href={href}
                >
                  <Fragment set:html={text} />
                </a>
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
